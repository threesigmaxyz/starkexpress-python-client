# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class TransactionDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            transactionId = schemas.UUIDSchema
            
            
            class starkExTransactionId(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'starkExTransactionId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            starkExInstanceId = schemas.UUIDSchema
            tenantId = schemas.UUIDSchema
        
            @staticmethod
            def operation() -> typing.Type['StarkExOperation']:
                return StarkExOperation
        
            @staticmethod
            def status() -> typing.Type['TransactionStatus']:
                return TransactionStatus
            creationDate = schemas.DateTimeSchema
        
            @staticmethod
            def rawTransaction() -> typing.Type['TransactionModel']:
                return TransactionModel
            __annotations__ = {
                "transactionId": transactionId,
                "starkExTransactionId": starkExTransactionId,
                "starkExInstanceId": starkExInstanceId,
                "tenantId": tenantId,
                "operation": operation,
                "status": status,
                "creationDate": creationDate,
                "rawTransaction": rawTransaction,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["starkExTransactionId"]) -> MetaOapg.properties.starkExTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["starkExInstanceId"]) -> MetaOapg.properties.starkExInstanceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantId"]) -> MetaOapg.properties.tenantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> 'StarkExOperation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'TransactionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationDate"]) -> MetaOapg.properties.creationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rawTransaction"]) -> 'TransactionModel': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transactionId"], typing_extensions.Literal["starkExTransactionId"], typing_extensions.Literal["starkExInstanceId"], typing_extensions.Literal["tenantId"], typing_extensions.Literal["operation"], typing_extensions.Literal["status"], typing_extensions.Literal["creationDate"], typing_extensions.Literal["rawTransaction"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionId"]) -> typing.Union[MetaOapg.properties.transactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["starkExTransactionId"]) -> typing.Union[MetaOapg.properties.starkExTransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["starkExInstanceId"]) -> typing.Union[MetaOapg.properties.starkExInstanceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantId"]) -> typing.Union[MetaOapg.properties.tenantId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> typing.Union['StarkExOperation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['TransactionStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationDate"]) -> typing.Union[MetaOapg.properties.creationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rawTransaction"]) -> typing.Union['TransactionModel', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transactionId"], typing_extensions.Literal["starkExTransactionId"], typing_extensions.Literal["starkExInstanceId"], typing_extensions.Literal["tenantId"], typing_extensions.Literal["operation"], typing_extensions.Literal["status"], typing_extensions.Literal["creationDate"], typing_extensions.Literal["rawTransaction"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        transactionId: typing.Union[MetaOapg.properties.transactionId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        starkExTransactionId: typing.Union[MetaOapg.properties.starkExTransactionId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        starkExInstanceId: typing.Union[MetaOapg.properties.starkExInstanceId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        tenantId: typing.Union[MetaOapg.properties.tenantId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        operation: typing.Union['StarkExOperation', schemas.Unset] = schemas.unset,
        status: typing.Union['TransactionStatus', schemas.Unset] = schemas.unset,
        creationDate: typing.Union[MetaOapg.properties.creationDate, str, datetime, schemas.Unset] = schemas.unset,
        rawTransaction: typing.Union['TransactionModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TransactionDto':
        return super().__new__(
            cls,
            *_args,
            transactionId=transactionId,
            starkExTransactionId=starkExTransactionId,
            starkExInstanceId=starkExInstanceId,
            tenantId=tenantId,
            operation=operation,
            status=status,
            creationDate=creationDate,
            rawTransaction=rawTransaction,
            _configuration=_configuration,
        )

from starkexpress_api.model.stark_ex_operation import StarkExOperation
from starkexpress_api.model.transaction_model import TransactionModel
from starkexpress_api.model.transaction_status import TransactionStatus
