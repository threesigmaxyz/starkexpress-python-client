# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class SignatureModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Model representing an ECDSA signature data.
    """


    class MetaOapg:
        required = {
            "r",
            "s",
        }
        
        class properties:
            
            
            class r(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'hex'
                    min_length = 1
            
            
            class s(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'hex'
                    min_length = 1
            __annotations__ = {
                "r": r,
                "s": s,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    r: MetaOapg.properties.r
    s: MetaOapg.properties.s
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["r"]) -> MetaOapg.properties.r: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s"]) -> MetaOapg.properties.s: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["r"], typing_extensions.Literal["s"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["r"]) -> MetaOapg.properties.r: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s"]) -> MetaOapg.properties.s: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["r"], typing_extensions.Literal["s"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        r: typing.Union[MetaOapg.properties.r, str, ],
        s: typing.Union[MetaOapg.properties.s, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SignatureModel':
        return super().__new__(
            cls,
            *_args,
            r=r,
            s=s,
            _configuration=_configuration,
        )
