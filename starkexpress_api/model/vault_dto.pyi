# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class VaultDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            vaultId = schemas.UUIDSchema
            vaultChainId = schemas.StrSchema
            
            
            class starkExAddress(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'hex'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'starkExAddress':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class assetSymbol(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assetSymbol':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class tokenId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'hex'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tokenId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class mintingBlob(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'hex'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mintingBlob':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class assetStarkExId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'hex'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assetStarkExId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class userStarkKey(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'hex'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userStarkKey':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            availableBalance = schemas.StrSchema
            accountingBalance = schemas.StrSchema
        
            @staticmethod
            def dataAvailabilityMode() -> typing.Type['DataAvailabilityModes']:
                return DataAvailabilityModes
            __annotations__ = {
                "vaultId": vaultId,
                "vaultChainId": vaultChainId,
                "starkExAddress": starkExAddress,
                "assetSymbol": assetSymbol,
                "tokenId": tokenId,
                "mintingBlob": mintingBlob,
                "assetStarkExId": assetStarkExId,
                "userStarkKey": userStarkKey,
                "availableBalance": availableBalance,
                "accountingBalance": accountingBalance,
                "dataAvailabilityMode": dataAvailabilityMode,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vaultId"]) -> MetaOapg.properties.vaultId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vaultChainId"]) -> MetaOapg.properties.vaultChainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["starkExAddress"]) -> MetaOapg.properties.starkExAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetSymbol"]) -> MetaOapg.properties.assetSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mintingBlob"]) -> MetaOapg.properties.mintingBlob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetStarkExId"]) -> MetaOapg.properties.assetStarkExId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userStarkKey"]) -> MetaOapg.properties.userStarkKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableBalance"]) -> MetaOapg.properties.availableBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountingBalance"]) -> MetaOapg.properties.accountingBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataAvailabilityMode"]) -> 'DataAvailabilityModes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["vaultId"], typing_extensions.Literal["vaultChainId"], typing_extensions.Literal["starkExAddress"], typing_extensions.Literal["assetSymbol"], typing_extensions.Literal["tokenId"], typing_extensions.Literal["mintingBlob"], typing_extensions.Literal["assetStarkExId"], typing_extensions.Literal["userStarkKey"], typing_extensions.Literal["availableBalance"], typing_extensions.Literal["accountingBalance"], typing_extensions.Literal["dataAvailabilityMode"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vaultId"]) -> typing.Union[MetaOapg.properties.vaultId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vaultChainId"]) -> typing.Union[MetaOapg.properties.vaultChainId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["starkExAddress"]) -> typing.Union[MetaOapg.properties.starkExAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetSymbol"]) -> typing.Union[MetaOapg.properties.assetSymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenId"]) -> typing.Union[MetaOapg.properties.tokenId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mintingBlob"]) -> typing.Union[MetaOapg.properties.mintingBlob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetStarkExId"]) -> typing.Union[MetaOapg.properties.assetStarkExId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userStarkKey"]) -> typing.Union[MetaOapg.properties.userStarkKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableBalance"]) -> typing.Union[MetaOapg.properties.availableBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountingBalance"]) -> typing.Union[MetaOapg.properties.accountingBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataAvailabilityMode"]) -> typing.Union['DataAvailabilityModes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vaultId"], typing_extensions.Literal["vaultChainId"], typing_extensions.Literal["starkExAddress"], typing_extensions.Literal["assetSymbol"], typing_extensions.Literal["tokenId"], typing_extensions.Literal["mintingBlob"], typing_extensions.Literal["assetStarkExId"], typing_extensions.Literal["userStarkKey"], typing_extensions.Literal["availableBalance"], typing_extensions.Literal["accountingBalance"], typing_extensions.Literal["dataAvailabilityMode"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        vaultId: typing.Union[MetaOapg.properties.vaultId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        vaultChainId: typing.Union[MetaOapg.properties.vaultChainId, str, schemas.Unset] = schemas.unset,
        starkExAddress: typing.Union[MetaOapg.properties.starkExAddress, None, str, schemas.Unset] = schemas.unset,
        assetSymbol: typing.Union[MetaOapg.properties.assetSymbol, None, str, schemas.Unset] = schemas.unset,
        tokenId: typing.Union[MetaOapg.properties.tokenId, None, str, schemas.Unset] = schemas.unset,
        mintingBlob: typing.Union[MetaOapg.properties.mintingBlob, None, str, schemas.Unset] = schemas.unset,
        assetStarkExId: typing.Union[MetaOapg.properties.assetStarkExId, None, str, schemas.Unset] = schemas.unset,
        userStarkKey: typing.Union[MetaOapg.properties.userStarkKey, None, str, schemas.Unset] = schemas.unset,
        availableBalance: typing.Union[MetaOapg.properties.availableBalance, str, schemas.Unset] = schemas.unset,
        accountingBalance: typing.Union[MetaOapg.properties.accountingBalance, str, schemas.Unset] = schemas.unset,
        dataAvailabilityMode: typing.Union['DataAvailabilityModes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'VaultDto':
        return super().__new__(
            cls,
            *_args,
            vaultId=vaultId,
            vaultChainId=vaultChainId,
            starkExAddress=starkExAddress,
            assetSymbol=assetSymbol,
            tokenId=tokenId,
            mintingBlob=mintingBlob,
            assetStarkExId=assetStarkExId,
            userStarkKey=userStarkKey,
            availableBalance=availableBalance,
            accountingBalance=accountingBalance,
            dataAvailabilityMode=dataAvailabilityMode,
            _configuration=_configuration,
        )

from starkexpress_api.model.data_availability_modes import DataAvailabilityModes
