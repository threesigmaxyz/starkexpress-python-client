# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class SettlementOrderModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "buyVaultId",
            "signature",
            "buyQuantizedAmount",
            "expirationTimestamp",
            "sellQuantizedAmount",
            "nonce",
            "sellVaultId",
        }
        
        class properties:
            buyVaultId = schemas.UUIDSchema
            buyQuantizedAmount = schemas.StrSchema
            sellVaultId = schemas.UUIDSchema
            sellQuantizedAmount = schemas.StrSchema
            
            
            class nonce(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 2147483647
                    inclusive_minimum = 0
        
            @staticmethod
            def signature() -> typing.Type['SignatureModel']:
                return SignatureModel
            expirationTimestamp = schemas.Int64Schema
            
            
            class feeVaultId(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'feeVaultId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class feeQuantizedAmount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'feeQuantizedAmount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "buyVaultId": buyVaultId,
                "buyQuantizedAmount": buyQuantizedAmount,
                "sellVaultId": sellVaultId,
                "sellQuantizedAmount": sellQuantizedAmount,
                "nonce": nonce,
                "signature": signature,
                "expirationTimestamp": expirationTimestamp,
                "feeVaultId": feeVaultId,
                "feeQuantizedAmount": feeQuantizedAmount,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    buyVaultId: MetaOapg.properties.buyVaultId
    signature: 'SignatureModel'
    buyQuantizedAmount: MetaOapg.properties.buyQuantizedAmount
    expirationTimestamp: MetaOapg.properties.expirationTimestamp
    sellQuantizedAmount: MetaOapg.properties.sellQuantizedAmount
    nonce: MetaOapg.properties.nonce
    sellVaultId: MetaOapg.properties.sellVaultId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyVaultId"]) -> MetaOapg.properties.buyVaultId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> 'SignatureModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyQuantizedAmount"]) -> MetaOapg.properties.buyQuantizedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationTimestamp"]) -> MetaOapg.properties.expirationTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sellQuantizedAmount"]) -> MetaOapg.properties.sellQuantizedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonce"]) -> MetaOapg.properties.nonce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sellVaultId"]) -> MetaOapg.properties.sellVaultId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeVaultId"]) -> MetaOapg.properties.feeVaultId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeQuantizedAmount"]) -> MetaOapg.properties.feeQuantizedAmount: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["buyVaultId"], typing_extensions.Literal["signature"], typing_extensions.Literal["buyQuantizedAmount"], typing_extensions.Literal["expirationTimestamp"], typing_extensions.Literal["sellQuantizedAmount"], typing_extensions.Literal["nonce"], typing_extensions.Literal["sellVaultId"], typing_extensions.Literal["feeVaultId"], typing_extensions.Literal["feeQuantizedAmount"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyVaultId"]) -> MetaOapg.properties.buyVaultId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> 'SignatureModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyQuantizedAmount"]) -> MetaOapg.properties.buyQuantizedAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationTimestamp"]) -> MetaOapg.properties.expirationTimestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sellQuantizedAmount"]) -> MetaOapg.properties.sellQuantizedAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonce"]) -> MetaOapg.properties.nonce: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sellVaultId"]) -> MetaOapg.properties.sellVaultId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeVaultId"]) -> typing.Union[MetaOapg.properties.feeVaultId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeQuantizedAmount"]) -> typing.Union[MetaOapg.properties.feeQuantizedAmount, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["buyVaultId"], typing_extensions.Literal["signature"], typing_extensions.Literal["buyQuantizedAmount"], typing_extensions.Literal["expirationTimestamp"], typing_extensions.Literal["sellQuantizedAmount"], typing_extensions.Literal["nonce"], typing_extensions.Literal["sellVaultId"], typing_extensions.Literal["feeVaultId"], typing_extensions.Literal["feeQuantizedAmount"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        buyVaultId: typing.Union[MetaOapg.properties.buyVaultId, str, uuid.UUID, ],
        signature: 'SignatureModel',
        buyQuantizedAmount: typing.Union[MetaOapg.properties.buyQuantizedAmount, str, ],
        expirationTimestamp: typing.Union[MetaOapg.properties.expirationTimestamp, decimal.Decimal, int, ],
        sellQuantizedAmount: typing.Union[MetaOapg.properties.sellQuantizedAmount, str, ],
        nonce: typing.Union[MetaOapg.properties.nonce, decimal.Decimal, int, ],
        sellVaultId: typing.Union[MetaOapg.properties.sellVaultId, str, uuid.UUID, ],
        feeVaultId: typing.Union[MetaOapg.properties.feeVaultId, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        feeQuantizedAmount: typing.Union[MetaOapg.properties.feeQuantizedAmount, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SettlementOrderModel':
        return super().__new__(
            cls,
            *_args,
            buyVaultId=buyVaultId,
            signature=signature,
            buyQuantizedAmount=buyQuantizedAmount,
            expirationTimestamp=expirationTimestamp,
            sellQuantizedAmount=sellQuantizedAmount,
            nonce=nonce,
            sellVaultId=sellVaultId,
            feeVaultId=feeVaultId,
            feeQuantizedAmount=feeQuantizedAmount,
            _configuration=_configuration,
        )

from starkexpress_api.model.signature_model import SignatureModel
