# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class OrderDetailsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class starkKey(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'hex'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'starkKey':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            sellQuantizedAmount = schemas.StrSchema
            buyQuantizedAmount = schemas.StrSchema
            sellVaultChainId = schemas.StrSchema
            buyVaultChainId = schemas.StrSchema
        
            @staticmethod
            def fee() -> typing.Type['FeeDto']:
                return FeeDto
            expirationTimestamp = schemas.Int64Schema
            nonce = schemas.Int32Schema
            
            
            class signablePayload(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'hex'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'signablePayload':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "starkKey": starkKey,
                "sellQuantizedAmount": sellQuantizedAmount,
                "buyQuantizedAmount": buyQuantizedAmount,
                "sellVaultChainId": sellVaultChainId,
                "buyVaultChainId": buyVaultChainId,
                "fee": fee,
                "expirationTimestamp": expirationTimestamp,
                "nonce": nonce,
                "signablePayload": signablePayload,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["starkKey"]) -> MetaOapg.properties.starkKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sellQuantizedAmount"]) -> MetaOapg.properties.sellQuantizedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyQuantizedAmount"]) -> MetaOapg.properties.buyQuantizedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sellVaultChainId"]) -> MetaOapg.properties.sellVaultChainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyVaultChainId"]) -> MetaOapg.properties.buyVaultChainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> 'FeeDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationTimestamp"]) -> MetaOapg.properties.expirationTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonce"]) -> MetaOapg.properties.nonce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signablePayload"]) -> MetaOapg.properties.signablePayload: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["starkKey"], typing_extensions.Literal["sellQuantizedAmount"], typing_extensions.Literal["buyQuantizedAmount"], typing_extensions.Literal["sellVaultChainId"], typing_extensions.Literal["buyVaultChainId"], typing_extensions.Literal["fee"], typing_extensions.Literal["expirationTimestamp"], typing_extensions.Literal["nonce"], typing_extensions.Literal["signablePayload"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["starkKey"]) -> typing.Union[MetaOapg.properties.starkKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sellQuantizedAmount"]) -> typing.Union[MetaOapg.properties.sellQuantizedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyQuantizedAmount"]) -> typing.Union[MetaOapg.properties.buyQuantizedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sellVaultChainId"]) -> typing.Union[MetaOapg.properties.sellVaultChainId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyVaultChainId"]) -> typing.Union[MetaOapg.properties.buyVaultChainId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> typing.Union['FeeDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationTimestamp"]) -> typing.Union[MetaOapg.properties.expirationTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonce"]) -> typing.Union[MetaOapg.properties.nonce, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signablePayload"]) -> typing.Union[MetaOapg.properties.signablePayload, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["starkKey"], typing_extensions.Literal["sellQuantizedAmount"], typing_extensions.Literal["buyQuantizedAmount"], typing_extensions.Literal["sellVaultChainId"], typing_extensions.Literal["buyVaultChainId"], typing_extensions.Literal["fee"], typing_extensions.Literal["expirationTimestamp"], typing_extensions.Literal["nonce"], typing_extensions.Literal["signablePayload"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        starkKey: typing.Union[MetaOapg.properties.starkKey, None, str, schemas.Unset] = schemas.unset,
        sellQuantizedAmount: typing.Union[MetaOapg.properties.sellQuantizedAmount, str, schemas.Unset] = schemas.unset,
        buyQuantizedAmount: typing.Union[MetaOapg.properties.buyQuantizedAmount, str, schemas.Unset] = schemas.unset,
        sellVaultChainId: typing.Union[MetaOapg.properties.sellVaultChainId, str, schemas.Unset] = schemas.unset,
        buyVaultChainId: typing.Union[MetaOapg.properties.buyVaultChainId, str, schemas.Unset] = schemas.unset,
        fee: typing.Union['FeeDto', schemas.Unset] = schemas.unset,
        expirationTimestamp: typing.Union[MetaOapg.properties.expirationTimestamp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nonce: typing.Union[MetaOapg.properties.nonce, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        signablePayload: typing.Union[MetaOapg.properties.signablePayload, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OrderDetailsDto':
        return super().__new__(
            cls,
            *_args,
            starkKey=starkKey,
            sellQuantizedAmount=sellQuantizedAmount,
            buyQuantizedAmount=buyQuantizedAmount,
            sellVaultChainId=sellVaultChainId,
            buyVaultChainId=buyVaultChainId,
            fee=fee,
            expirationTimestamp=expirationTimestamp,
            nonce=nonce,
            signablePayload=signablePayload,
            _configuration=_configuration,
        )

from starkexpress_api.model.fee_dto import FeeDto
