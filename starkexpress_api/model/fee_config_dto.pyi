# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class FeeConfigDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            feeId = schemas.UUIDSchema
        
            @staticmethod
            def action() -> typing.Type['FeeAction']:
                return FeeAction
            basisPoints = schemas.Int32Schema
            __annotations__ = {
                "feeId": feeId,
                "action": action,
                "basisPoints": basisPoints,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeId"]) -> MetaOapg.properties.feeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> 'FeeAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basisPoints"]) -> MetaOapg.properties.basisPoints: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["feeId"], typing_extensions.Literal["action"], typing_extensions.Literal["basisPoints"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeId"]) -> typing.Union[MetaOapg.properties.feeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> typing.Union['FeeAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basisPoints"]) -> typing.Union[MetaOapg.properties.basisPoints, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["feeId"], typing_extensions.Literal["action"], typing_extensions.Literal["basisPoints"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        feeId: typing.Union[MetaOapg.properties.feeId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        action: typing.Union['FeeAction', schemas.Unset] = schemas.unset,
        basisPoints: typing.Union[MetaOapg.properties.basisPoints, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FeeConfigDto':
        return super().__new__(
            cls,
            *_args,
            feeId=feeId,
            action=action,
            basisPoints=basisPoints,
            _configuration=_configuration,
        )

from starkexpress_api.model.fee_action import FeeAction
