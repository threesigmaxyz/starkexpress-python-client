# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class MintRequestDataModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request model to mint a batch of assets.
    """


    class MetaOapg:
        required = {
            "mints",
            "userId",
        }
        
        class properties:
            userId = schemas.UUIDSchema
            
            
            class mints(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MintDataModel']:
                        return MintDataModel
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MintDataModel'], typing.List['MintDataModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mints':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MintDataModel':
                    return super().__getitem__(i)
            __annotations__ = {
                "userId": userId,
                "mints": mints,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    mints: MetaOapg.properties.mints
    userId: MetaOapg.properties.userId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mints"]) -> MetaOapg.properties.mints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mints"], typing_extensions.Literal["userId"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mints"]) -> MetaOapg.properties.mints: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mints"], typing_extensions.Literal["userId"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        mints: typing.Union[MetaOapg.properties.mints, list, tuple, ],
        userId: typing.Union[MetaOapg.properties.userId, str, uuid.UUID, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MintRequestDataModel':
        return super().__new__(
            cls,
            *_args,
            mints=mints,
            userId=userId,
            _configuration=_configuration,
        )

from starkexpress_api.model.mint_data_model import MintDataModel
