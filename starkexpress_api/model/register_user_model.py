# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class RegisterUserModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "address",
            "starkSignature",
            "eip712Signature",
            "starkKey",
            "username",
        }
        
        class properties:
            
            
            class username(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'string'
                    max_length = 30
                    min_length = 6
            
            
            class starkKey(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'hex'
                    min_length = 1
        
            @staticmethod
            def starkSignature() -> typing.Type['SignatureModel']:
                return SignatureModel
            
            
            class address(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'hex'
                    min_length = 1
            
            
            class eip712Signature(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'hex'
                    min_length = 1
            __annotations__ = {
                "username": username,
                "starkKey": starkKey,
                "starkSignature": starkSignature,
                "address": address,
                "eip712Signature": eip712Signature,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    address: MetaOapg.properties.address
    starkSignature: 'SignatureModel'
    eip712Signature: MetaOapg.properties.eip712Signature
    starkKey: MetaOapg.properties.starkKey
    username: MetaOapg.properties.username
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["starkSignature"]) -> 'SignatureModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eip712Signature"]) -> MetaOapg.properties.eip712Signature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["starkKey"]) -> MetaOapg.properties.starkKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address"], typing_extensions.Literal["starkSignature"], typing_extensions.Literal["eip712Signature"], typing_extensions.Literal["starkKey"], typing_extensions.Literal["username"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["starkSignature"]) -> 'SignatureModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eip712Signature"]) -> MetaOapg.properties.eip712Signature: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["starkKey"]) -> MetaOapg.properties.starkKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address"], typing_extensions.Literal["starkSignature"], typing_extensions.Literal["eip712Signature"], typing_extensions.Literal["starkKey"], typing_extensions.Literal["username"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        starkSignature: 'SignatureModel',
        eip712Signature: typing.Union[MetaOapg.properties.eip712Signature, str, ],
        starkKey: typing.Union[MetaOapg.properties.starkKey, str, ],
        username: typing.Union[MetaOapg.properties.username, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RegisterUserModel':
        return super().__new__(
            cls,
            *_args,
            address=address,
            starkSignature=starkSignature,
            eip712Signature=eip712Signature,
            starkKey=starkKey,
            username=username,
            _configuration=_configuration,
        )

from starkexpress_api.model.signature_model import SignatureModel
