# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class OrderbookLevel1DataDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            orderbookId = schemas.UUIDSchema
            bidPrice = schemas.Float64Schema
            bidSize = schemas.StrSchema
            askPrice = schemas.Float64Schema
            askSize = schemas.StrSchema
            lastPrice = schemas.Float64Schema
            lastSize = schemas.StrSchema
            __annotations__ = {
                "orderbookId": orderbookId,
                "bidPrice": bidPrice,
                "bidSize": bidSize,
                "askPrice": askPrice,
                "askSize": askSize,
                "lastPrice": lastPrice,
                "lastSize": lastSize,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderbookId"]) -> MetaOapg.properties.orderbookId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bidPrice"]) -> MetaOapg.properties.bidPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bidSize"]) -> MetaOapg.properties.bidSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["askPrice"]) -> MetaOapg.properties.askPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["askSize"]) -> MetaOapg.properties.askSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastPrice"]) -> MetaOapg.properties.lastPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastSize"]) -> MetaOapg.properties.lastSize: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["orderbookId"], typing_extensions.Literal["bidPrice"], typing_extensions.Literal["bidSize"], typing_extensions.Literal["askPrice"], typing_extensions.Literal["askSize"], typing_extensions.Literal["lastPrice"], typing_extensions.Literal["lastSize"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderbookId"]) -> typing.Union[MetaOapg.properties.orderbookId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bidPrice"]) -> typing.Union[MetaOapg.properties.bidPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bidSize"]) -> typing.Union[MetaOapg.properties.bidSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["askPrice"]) -> typing.Union[MetaOapg.properties.askPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["askSize"]) -> typing.Union[MetaOapg.properties.askSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastPrice"]) -> typing.Union[MetaOapg.properties.lastPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastSize"]) -> typing.Union[MetaOapg.properties.lastSize, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["orderbookId"], typing_extensions.Literal["bidPrice"], typing_extensions.Literal["bidSize"], typing_extensions.Literal["askPrice"], typing_extensions.Literal["askSize"], typing_extensions.Literal["lastPrice"], typing_extensions.Literal["lastSize"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        orderbookId: typing.Union[MetaOapg.properties.orderbookId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        bidPrice: typing.Union[MetaOapg.properties.bidPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bidSize: typing.Union[MetaOapg.properties.bidSize, str, schemas.Unset] = schemas.unset,
        askPrice: typing.Union[MetaOapg.properties.askPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        askSize: typing.Union[MetaOapg.properties.askSize, str, schemas.Unset] = schemas.unset,
        lastPrice: typing.Union[MetaOapg.properties.lastPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lastSize: typing.Union[MetaOapg.properties.lastSize, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OrderbookLevel1DataDto':
        return super().__new__(
            cls,
            *_args,
            orderbookId=orderbookId,
            bidPrice=bidPrice,
            bidSize=bidSize,
            askPrice=askPrice,
            askSize=askSize,
            lastPrice=lastPrice,
            lastSize=lastSize,
            _configuration=_configuration,
        )
