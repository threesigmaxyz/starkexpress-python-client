# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class SubmitSettlementModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request model to transfer assets between users.
    """


    class MetaOapg:
        required = {
            "orderB",
            "orderA",
        }
        
        class properties:
        
            @staticmethod
            def orderA() -> typing.Type['SettlementOrderModel']:
                return SettlementOrderModel
        
            @staticmethod
            def orderB() -> typing.Type['SettlementOrderModel']:
                return SettlementOrderModel
        
            @staticmethod
            def settlementInfo() -> typing.Type['SettlementInfoModel']:
                return SettlementInfoModel
            __annotations__ = {
                "orderA": orderA,
                "orderB": orderB,
                "settlementInfo": settlementInfo,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    orderB: 'SettlementOrderModel'
    orderA: 'SettlementOrderModel'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderB"]) -> 'SettlementOrderModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderA"]) -> 'SettlementOrderModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settlementInfo"]) -> 'SettlementInfoModel': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["orderB"], typing_extensions.Literal["orderA"], typing_extensions.Literal["settlementInfo"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderB"]) -> 'SettlementOrderModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderA"]) -> 'SettlementOrderModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settlementInfo"]) -> typing.Union['SettlementInfoModel', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["orderB"], typing_extensions.Literal["orderA"], typing_extensions.Literal["settlementInfo"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        orderB: 'SettlementOrderModel',
        orderA: 'SettlementOrderModel',
        settlementInfo: typing.Union['SettlementInfoModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SubmitSettlementModel':
        return super().__new__(
            cls,
            *_args,
            orderB=orderB,
            orderA=orderA,
            settlementInfo=settlementInfo,
            _configuration=_configuration,
        )

from starkexpress_api.model.settlement_info_model import SettlementInfoModel
from starkexpress_api.model.settlement_order_model import SettlementOrderModel
