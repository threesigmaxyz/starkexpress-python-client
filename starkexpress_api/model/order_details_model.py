# coding: utf-8

"""
    StarkExpress API Docs

    An API for the StarkExpress platform.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from starkexpress_api import schemas  # noqa: F401


class OrderDetailsModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request model to fetch details for a signable order.
    """


    class MetaOapg:
        required = {
            "amount",
            "side",
            "orderbookId",
            "price",
            "sellDataAvailabilityMode",
            "buyDataAvailabilityMode",
            "userId",
        }
        
        class properties:
            orderbookId = schemas.UUIDSchema
            userId = schemas.UUIDSchema
        
            @staticmethod
            def side() -> typing.Type['OrderSide']:
                return OrderSide
            price = schemas.Float64Schema
        
            @staticmethod
            def amount() -> typing.Type['BigInteger']:
                return BigInteger
        
            @staticmethod
            def sellDataAvailabilityMode() -> typing.Type['DataAvailabilityModes']:
                return DataAvailabilityModes
        
            @staticmethod
            def buyDataAvailabilityMode() -> typing.Type['DataAvailabilityModes']:
                return DataAvailabilityModes
            __annotations__ = {
                "orderbookId": orderbookId,
                "userId": userId,
                "side": side,
                "price": price,
                "amount": amount,
                "sellDataAvailabilityMode": sellDataAvailabilityMode,
                "buyDataAvailabilityMode": buyDataAvailabilityMode,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    amount: 'BigInteger'
    side: 'OrderSide'
    orderbookId: MetaOapg.properties.orderbookId
    price: MetaOapg.properties.price
    sellDataAvailabilityMode: 'DataAvailabilityModes'
    buyDataAvailabilityMode: 'DataAvailabilityModes'
    userId: MetaOapg.properties.userId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'BigInteger': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["side"]) -> 'OrderSide': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderbookId"]) -> MetaOapg.properties.orderbookId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sellDataAvailabilityMode"]) -> 'DataAvailabilityModes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyDataAvailabilityMode"]) -> 'DataAvailabilityModes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["side"], typing_extensions.Literal["orderbookId"], typing_extensions.Literal["price"], typing_extensions.Literal["sellDataAvailabilityMode"], typing_extensions.Literal["buyDataAvailabilityMode"], typing_extensions.Literal["userId"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'BigInteger': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> 'OrderSide': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderbookId"]) -> MetaOapg.properties.orderbookId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sellDataAvailabilityMode"]) -> 'DataAvailabilityModes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyDataAvailabilityMode"]) -> 'DataAvailabilityModes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["side"], typing_extensions.Literal["orderbookId"], typing_extensions.Literal["price"], typing_extensions.Literal["sellDataAvailabilityMode"], typing_extensions.Literal["buyDataAvailabilityMode"], typing_extensions.Literal["userId"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: 'BigInteger',
        side: 'OrderSide',
        orderbookId: typing.Union[MetaOapg.properties.orderbookId, str, uuid.UUID, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        sellDataAvailabilityMode: 'DataAvailabilityModes',
        buyDataAvailabilityMode: 'DataAvailabilityModes',
        userId: typing.Union[MetaOapg.properties.userId, str, uuid.UUID, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OrderDetailsModel':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            side=side,
            orderbookId=orderbookId,
            price=price,
            sellDataAvailabilityMode=sellDataAvailabilityMode,
            buyDataAvailabilityMode=buyDataAvailabilityMode,
            userId=userId,
            _configuration=_configuration,
        )

from starkexpress_api.model.big_integer import BigInteger
from starkexpress_api.model.data_availability_modes import DataAvailabilityModes
from starkexpress_api.model.order_side import OrderSide
